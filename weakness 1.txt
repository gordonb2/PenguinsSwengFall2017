public: System::Void checkForWeakness1(System::IO::StreamWriter^ sw) 
	{
		sw->WriteLine("Weakness 1: Uninitialized Variables");
		sw->WriteLine("\tRisk: High");
		sw->WriteLine();

		//TODO: Put the code here
		for (int i = 0; i < fileList->Items->Count; i++)
		{
			sw->WriteLine(fileList->Items[i]);
			//Get the file into file contents
			String^ fileName = fileList->Items[i]->ToString();
			std::ifstream infile{ msclr::interop::marshal_as<std::string>(fileName) };
			std::string file_contents{ std::istreambuf_iterator<char>(infile), std::istreambuf_iterator<char>() };


			//method
			std::string assignDeclare = ":=";
			int declarePos = file_contents.find(assignDeclare);

			
			while(declarePos != -1)
			{
				std::string textBefDec = file_contents.substr(declarePos - 10, declarePos-1); //-1 is the space before the assignment, -10 gives us a long area to check for names
				int posBeforeDec = file_contents.find(textBefDec); //find 10 positions before the declaration
				while (marshal_as<String^>(file_contents.substr(posBeforeDec))->Equals(" ")) //increment spaces until the first pos of declared name
				{
					posBeforeDec++;
				}
				int firstletterOfDec = posBeforeDec;// say variable is "Current" the firstletterOfDec is the position of the "C"
				std::string decName = textBefDec.substr(firstletterOfDec, declarePos - 1); //"C" to the space before ":=" (unincluded)
				System::Console::WriteLine("Declared: " + marshal_as<String^>(decName));

				String^ ourDeclare = marshal_as<String^>(file_contents.substr(file_contents.find(decName) + 1, file_contents.find(decName) + 2));
				if (!ourDeclare->Equals(": "))
				{
					System::Console::WriteLine(marshal_as<String^>(decName) + " is not initialized.");
				}



			}
			
		}

		sw->WriteLine(SEPERATOR);
	}